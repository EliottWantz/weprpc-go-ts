/* eslint-disable */
// scrabble v0.1.0 1951e8dd141fb960d078e48deeb46211fa46041a
// --
// Code generated by webrpc-gen@v0.10.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=example.ridl -target=typescript -client -out=./client/service/exemple.gen.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.1.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "1951e8dd141fb960d078e48deeb46211fa46041a"

//
// Types
//


export interface User {
  id: string
  username: string
  
  createdAt: string
}

export interface UserService {
  ping(headers?: object): Promise<PingReturn>
  createUser(args: CreateUserArgs, headers?: object): Promise<CreateUserReturn>
  getUserByID(args: GetUserByIDArgs, headers?: object): Promise<GetUserByIDReturn>
  listUsers(headers?: object): Promise<ListUsersReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface CreateUserArgs {
  username: string
  password: string
}

export interface CreateUserReturn {
  user: User  
}
export interface GetUserByIDArgs {
  userId: string
}

export interface GetUserByIDReturn {
  user: User  
}
export interface ListUsersArgs {
}

export interface ListUsersReturn {
  users: Array<User>  
}


  
//
// Client
//
export class UserService implements UserService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/UserService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  createUser = (args: CreateUserArgs, headers?: object): Promise<CreateUserReturn> => {
    return this.fetch(
      this.url('CreateUser'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: <User>(_data.user)
        }
      })
    })
  }
  
  getUserByID = (args: GetUserByIDArgs, headers?: object): Promise<GetUserByIDReturn> => {
    return this.fetch(
      this.url('GetUserByID'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: <User>(_data.user)
        }
      })
    })
  }
  
  listUsers = (headers?: object): Promise<ListUsersReturn> => {
    return this.fetch(
      this.url('ListUsers'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          users: <Array<User>>(_data.users)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
